2017/10/20
在过热时，自动将所有引擎停机，冷却后自动开机
雷达现在分离到插件中，雷达插件通过重写hub的drawRadar实现
敌人状态显示分离到插件分析器中，通过重写hub的drawfoestate实现
产生热量的设备，如果是常驻设备则热量计算方式改为*dt
光学探测属性与分析器合并（todo）
将cls整合，在game之前load objloader
添加固定视角插件/激光武器
2017/10/21
添加自动瞄准武器 chain
添加自动跟踪武器 missileLancher
2017/10/22
添加鼠标主动制导功能 检测在key_core中，表现在radar中，target失效检测在ship.base中
将普通机炮跟自动机炮合并，以autoFire 和 autoTarget作为标志
自动机炮/导弹的target将优先ship.target
计划将武器部分的结构重写，base里将自动制导部分、飞行部分合并。使用“physic”标志来区别是否有实体子弹，否则用射线检测。
由于实体子弹的属性基本一致，因此将属性写在发射器上，子弹本身写入base中，在初始化时由发射器赋予属性。
2017/10/23
统一了所有武器发射器，为weapon,武器投射物统一为实体投射物bullet和能量射线laser
投射物的属性在weapon的属性体现，因此在weapon基础上衍生就可直接产生所有武器，无需单独设置投射物。
--------------------
以下为武器的所有属性。未来有可能扩充其他投射物单体。
weapon.pname = "hell fire"
weapon.fire_cd = 0.1 --发射间隔
weapon.chargeTime = 3 --充能时间
weapon.heat = 0 --单次发射的热量
weapon.fire_count = 1 --单次发射的子弹量
weapon.fire_offset = 0 --子弹的旋转偏移（可模拟子弹不精确，或随机子弹角度）
weapon.autoFire = true --自动开火
weapon.autoFireRange =  1300 --自动开火范围
weapon.autoTarget = true --自动寻的(武器自转)
weapon.target_type = "ship" --寻的类型 ship/bullet/all
weapon.rotSpeed = Pi--旋转速度 弧度/s
weapon.rotLimit = Pi/2 --单侧旋转角度限制
weapon.bullet = obj.others.laser --放出子弹类型 bullet/missile/decoy(分散放出型，诱使武器自爆)
weapon.hp = 1
weapon.scale = 10 --子弹碰撞大小
weapon.activeTime = 0.2 --子弹存活时间
weapon.activeRange = 500 --有效射程
weapon.tracing = true --跟踪能力
weapon.initVelocity = 0 --发射初速度
weapon.pushPower = 200 --自带推力
weapon.turnPower = 100 --自带扭力
weapon.linearDamping = 3 --线性速度衰减
weapon.angularDamping = 3 --旋转速度限制，提高力量的同时提高限制，提升灵敏程度，不至于跳
weapon.damage_type = "structure"--伤害类型 structure/energy/quantum(质子伤害，真实伤害，无差别的伤害)
weapon.damage_point = 5
weapon.explosion_range = 0 --碰撞后伤害半径如为0则单体伤害
weapon.through = 0 --碰撞后穿透 层数3 0为不穿透
weapon.drawTarget = true 
weapon.drawRange = true
------------------------------------------------------
现在将武器自动寻的的数据源绑定在雷达上。玩家自动获取，ai需要手动调用api.
（但是这样的代价是每帧需要多付出很多的范围检测，是否值得？）
radar对hud的绑定方式改变，radar成为hud的挂载。去调用radar的draw函数。
武器打击现在有对象限制，ship/bullet/all
现在激光武器子弹是单独的实体了。

2017/10/24
将雷达分为探测雷达/火控雷达 （模块）（屏幕显示的是根据雷达反馈生成的飞机）
探测雷达par  提供飞机屏幕的视觉显示等级越高显示距离越大（zoom）,细节越多（分辨型号，匹配机型/子弹外观）。
火控雷达fcr  提供短距离内位置和运动预判，给武器提供指导。
控制仓 根据鼠标位置，手动的向武器提供位置信息。
如探测雷达下线，屏幕仅能提供短距离视窗，无法提供飞机细节（以三角形代替），无法视窗无法zoom.
火控雷达下线，无法提供位置预判，自动瞄准/跟踪武器仅能提供实时方位。
武器在每次通信时，试图跟上两种雷达获取自身方位。然后获取目标信息，手动>火控预判>实时位置。
如雷达下线，未设置手动控制，则直线前进。（self.detection丢失/self.control丢失）(not enabled)
放出物如无法与主机通信（导弹），自毁。（self.ship丢失/self.slot丢失）
被动误伤规避模块，依赖火控雷达，当武器击中己方飞船时，发出该子弹的武器自动下线,再次开启需手动
主动误伤规避模块，在某范围内，出现己方飞船，则自动武器自动停用，直到该范围没有己方飞船自动启用。
（todo）
----
2017/10/25
模块分类
系统设备 --提供内部控制，数据获取，能量管理，视觉管理相关，根据机体设计一般在飞船中心位置
武装设备 --攻击和防御设备，一般武器有发射角度限制，因此极度依赖机体的slot位置。
动力设备 --提供飞船动力，一般安装在机体后部。


----只有雷达有权访问物理世界，并从userdata中得到指定数据。
光学雷达给出的数据 
visibleworld ={
	{
		x = ,
		y = ,
		angle = ,
		dist = ,
		azi = ,
		team = , --有伪装的无法分辨
		scale= ,
		mesh = ,
		exauted , --是否毁灭 灰色惯性状态持续n秒
	}
}

能量雷达给出的数据
energyworld ={
	{
		x = ,
		y = ,
		dist = ,
		azi = ,
		heat = ,
	}
}
火控雷达给出的数据
firecontrolworld = {
	{
		x = ,
		y = ,
		vx = , 
		vy = ,
		tx = ,
		ty = ,
	}
}
分析器给出的数据
analyser = {
	id = , --分析雷达数据，并将之合并成飞船的各个属性（给出每个飞船一个id） 	
	structure = , 
	energy = ,
	slots = , --插件结构
}

2017/10/27
飞船各类插件的结构重做完成。
ui部分完成状态框，mod框,miniMap框
各类雷达的视觉部分重做完成
原来的puff改为当前的尾迹绘制
todo：
热量系统设计？
子弹碰撞重做
飞船属性重做（质量 等）
飞船命中伤害重做
护盾系统重做
爆炸特效（将vert的相连顶点组成的线自由飞散，并产生一些火花）
商店/装配/日志/消息 系统及ui  消息记载入日志——>任务

2017/10/28
weapon中子弹跟踪更新，未来设计